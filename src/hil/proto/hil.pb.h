// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/hil.proto

#ifndef PROTOBUF_proto_2fhil_2eproto__INCLUDED
#define PROTOBUF_proto_2fhil_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2fhil_2eproto();
void protobuf_AssignDesc_proto_2fhil_2eproto();
void protobuf_ShutdownFile_proto_2fhil_2eproto();

class E3SensorData;
class TrafficLightState;

// ===================================================================

class E3SensorData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:E3SensorData) */ {
 public:
  E3SensorData();
  virtual ~E3SensorData();

  E3SensorData(const E3SensorData& from);

  inline E3SensorData& operator=(const E3SensorData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E3SensorData& default_instance();

  void Swap(E3SensorData* other);

  // implements Message ----------------------------------------------

  inline E3SensorData* New() const { return New(NULL); }

  E3SensorData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E3SensorData& from);
  void MergeFrom(const E3SensorData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(E3SensorData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sensor_name = 1;
  void clear_sensor_name();
  static const int kSensorNameFieldNumber = 1;
  const ::std::string& sensor_name() const;
  void set_sensor_name(const ::std::string& value);
  void set_sensor_name(const char* value);
  void set_sensor_name(const char* value, size_t size);
  ::std::string* mutable_sensor_name();
  ::std::string* release_sensor_name();
  void set_allocated_sensor_name(::std::string* sensor_name);

  // optional uint64 num_vehicles = 2;
  void clear_num_vehicles();
  static const int kNumVehiclesFieldNumber = 2;
  ::google::protobuf::uint64 num_vehicles() const;
  void set_num_vehicles(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:E3SensorData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr sensor_name_;
  ::google::protobuf::uint64 num_vehicles_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fhil_2eproto();
  friend void protobuf_AssignDesc_proto_2fhil_2eproto();
  friend void protobuf_ShutdownFile_proto_2fhil_2eproto();

  void InitAsDefaultInstance();
  static E3SensorData* default_instance_;
};
// -------------------------------------------------------------------

class TrafficLightState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TrafficLightState) */ {
 public:
  TrafficLightState();
  virtual ~TrafficLightState();

  TrafficLightState(const TrafficLightState& from);

  inline TrafficLightState& operator=(const TrafficLightState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficLightState& default_instance();

  void Swap(TrafficLightState* other);

  // implements Message ----------------------------------------------

  inline TrafficLightState* New() const { return New(NULL); }

  TrafficLightState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrafficLightState& from);
  void MergeFrom(const TrafficLightState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrafficLightState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string traffic_light_name = 1;
  void clear_traffic_light_name();
  static const int kTrafficLightNameFieldNumber = 1;
  const ::std::string& traffic_light_name() const;
  void set_traffic_light_name(const ::std::string& value);
  void set_traffic_light_name(const char* value);
  void set_traffic_light_name(const char* value, size_t size);
  ::std::string* mutable_traffic_light_name();
  ::std::string* release_traffic_light_name();
  void set_allocated_traffic_light_name(::std::string* traffic_light_name);

  // optional string state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // @@protoc_insertion_point(class_scope:TrafficLightState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr traffic_light_name_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fhil_2eproto();
  friend void protobuf_AssignDesc_proto_2fhil_2eproto();
  friend void protobuf_ShutdownFile_proto_2fhil_2eproto();

  void InitAsDefaultInstance();
  static TrafficLightState* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// E3SensorData

// optional string sensor_name = 1;
inline void E3SensorData::clear_sensor_name() {
  sensor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& E3SensorData::sensor_name() const {
  // @@protoc_insertion_point(field_get:E3SensorData.sensor_name)
  return sensor_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void E3SensorData::set_sensor_name(const ::std::string& value) {
  
  sensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:E3SensorData.sensor_name)
}
inline void E3SensorData::set_sensor_name(const char* value) {
  
  sensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:E3SensorData.sensor_name)
}
inline void E3SensorData::set_sensor_name(const char* value, size_t size) {
  
  sensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:E3SensorData.sensor_name)
}
inline ::std::string* E3SensorData::mutable_sensor_name() {
  
  // @@protoc_insertion_point(field_mutable:E3SensorData.sensor_name)
  return sensor_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* E3SensorData::release_sensor_name() {
  // @@protoc_insertion_point(field_release:E3SensorData.sensor_name)
  
  return sensor_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void E3SensorData::set_allocated_sensor_name(::std::string* sensor_name) {
  if (sensor_name != NULL) {
    
  } else {
    
  }
  sensor_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensor_name);
  // @@protoc_insertion_point(field_set_allocated:E3SensorData.sensor_name)
}

// optional uint64 num_vehicles = 2;
inline void E3SensorData::clear_num_vehicles() {
  num_vehicles_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 E3SensorData::num_vehicles() const {
  // @@protoc_insertion_point(field_get:E3SensorData.num_vehicles)
  return num_vehicles_;
}
inline void E3SensorData::set_num_vehicles(::google::protobuf::uint64 value) {
  
  num_vehicles_ = value;
  // @@protoc_insertion_point(field_set:E3SensorData.num_vehicles)
}

// -------------------------------------------------------------------

// TrafficLightState

// optional string traffic_light_name = 1;
inline void TrafficLightState::clear_traffic_light_name() {
  traffic_light_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrafficLightState::traffic_light_name() const {
  // @@protoc_insertion_point(field_get:TrafficLightState.traffic_light_name)
  return traffic_light_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficLightState::set_traffic_light_name(const ::std::string& value) {
  
  traffic_light_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TrafficLightState.traffic_light_name)
}
inline void TrafficLightState::set_traffic_light_name(const char* value) {
  
  traffic_light_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TrafficLightState.traffic_light_name)
}
inline void TrafficLightState::set_traffic_light_name(const char* value, size_t size) {
  
  traffic_light_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TrafficLightState.traffic_light_name)
}
inline ::std::string* TrafficLightState::mutable_traffic_light_name() {
  
  // @@protoc_insertion_point(field_mutable:TrafficLightState.traffic_light_name)
  return traffic_light_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrafficLightState::release_traffic_light_name() {
  // @@protoc_insertion_point(field_release:TrafficLightState.traffic_light_name)
  
  return traffic_light_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficLightState::set_allocated_traffic_light_name(::std::string* traffic_light_name) {
  if (traffic_light_name != NULL) {
    
  } else {
    
  }
  traffic_light_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traffic_light_name);
  // @@protoc_insertion_point(field_set_allocated:TrafficLightState.traffic_light_name)
}

// optional string state = 2;
inline void TrafficLightState::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrafficLightState::state() const {
  // @@protoc_insertion_point(field_get:TrafficLightState.state)
  return state_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficLightState::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TrafficLightState.state)
}
inline void TrafficLightState::set_state(const char* value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TrafficLightState.state)
}
inline void TrafficLightState::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TrafficLightState.state)
}
inline ::std::string* TrafficLightState::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:TrafficLightState.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrafficLightState::release_state() {
  // @@protoc_insertion_point(field_release:TrafficLightState.state)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficLightState::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:TrafficLightState.state)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fhil_2eproto__INCLUDED
