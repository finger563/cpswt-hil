// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/hil.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/hil.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* E3SensorData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E3SensorData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrafficLightState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrafficLightState_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fhil_2eproto() {
  protobuf_AddDesc_proto_2fhil_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/hil.proto");
  GOOGLE_CHECK(file != NULL);
  E3SensorData_descriptor_ = file->message_type(0);
  static const int E3SensorData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3SensorData, sensorname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3SensorData, numvehiclespresent_),
  };
  E3SensorData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      E3SensorData_descriptor_,
      E3SensorData::default_instance_,
      E3SensorData_offsets_,
      -1,
      -1,
      -1,
      sizeof(E3SensorData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3SensorData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E3SensorData, _is_default_instance_));
  TrafficLightState_descriptor_ = file->message_type(1);
  static const int TrafficLightState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightState, trafficlightname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightState, state_),
  };
  TrafficLightState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrafficLightState_descriptor_,
      TrafficLightState::default_instance_,
      TrafficLightState_offsets_,
      -1,
      -1,
      -1,
      sizeof(TrafficLightState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightState, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLightState, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fhil_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      E3SensorData_descriptor_, &E3SensorData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrafficLightState_descriptor_, &TrafficLightState::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fhil_2eproto() {
  delete E3SensorData::default_instance_;
  delete E3SensorData_reflection_;
  delete TrafficLightState::default_instance_;
  delete TrafficLightState_reflection_;
}

void protobuf_AddDesc_proto_2fhil_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017proto/hil.proto\">\n\014E3SensorData\022\022\n\nsen"
    "sorName\030\001 \001(\t\022\032\n\022numVehiclesPresent\030\002 \001("
    "\004\"<\n\021TrafficLightState\022\030\n\020trafficLightNa"
    "me\030\001 \001(\t\022\r\n\005state\030\002 \001(\tb\006proto3", 151);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/hil.proto", &protobuf_RegisterTypes);
  E3SensorData::default_instance_ = new E3SensorData();
  TrafficLightState::default_instance_ = new TrafficLightState();
  E3SensorData::default_instance_->InitAsDefaultInstance();
  TrafficLightState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fhil_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fhil_2eproto {
  StaticDescriptorInitializer_proto_2fhil_2eproto() {
    protobuf_AddDesc_proto_2fhil_2eproto();
  }
} static_descriptor_initializer_proto_2fhil_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int E3SensorData::kSensorNameFieldNumber;
const int E3SensorData::kNumVehiclesPresentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

E3SensorData::E3SensorData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:E3SensorData)
}

void E3SensorData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

E3SensorData::E3SensorData(const E3SensorData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:E3SensorData)
}

void E3SensorData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sensorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  numvehiclespresent_ = GOOGLE_ULONGLONG(0);
}

E3SensorData::~E3SensorData() {
  // @@protoc_insertion_point(destructor:E3SensorData)
  SharedDtor();
}

void E3SensorData::SharedDtor() {
  sensorname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void E3SensorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E3SensorData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E3SensorData_descriptor_;
}

const E3SensorData& E3SensorData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fhil_2eproto();
  return *default_instance_;
}

E3SensorData* E3SensorData::default_instance_ = NULL;

E3SensorData* E3SensorData::New(::google::protobuf::Arena* arena) const {
  E3SensorData* n = new E3SensorData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void E3SensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:E3SensorData)
  sensorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  numvehiclespresent_ = GOOGLE_ULONGLONG(0);
}

bool E3SensorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:E3SensorData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sensorName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensorname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sensorname().data(), this->sensorname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "E3SensorData.sensorName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_numVehiclesPresent;
        break;
      }

      // optional uint64 numVehiclesPresent = 2;
      case 2: {
        if (tag == 16) {
         parse_numVehiclesPresent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &numvehiclespresent_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:E3SensorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:E3SensorData)
  return false;
#undef DO_
}

void E3SensorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:E3SensorData)
  // optional string sensorName = 1;
  if (this->sensorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "E3SensorData.sensorName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sensorname(), output);
  }

  // optional uint64 numVehiclesPresent = 2;
  if (this->numvehiclespresent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->numvehiclespresent(), output);
  }

  // @@protoc_insertion_point(serialize_end:E3SensorData)
}

::google::protobuf::uint8* E3SensorData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:E3SensorData)
  // optional string sensorName = 1;
  if (this->sensorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensorname().data(), this->sensorname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "E3SensorData.sensorName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sensorname(), target);
  }

  // optional uint64 numVehiclesPresent = 2;
  if (this->numvehiclespresent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->numvehiclespresent(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:E3SensorData)
  return target;
}

int E3SensorData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:E3SensorData)
  int total_size = 0;

  // optional string sensorName = 1;
  if (this->sensorname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sensorname());
  }

  // optional uint64 numVehiclesPresent = 2;
  if (this->numvehiclespresent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->numvehiclespresent());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E3SensorData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:E3SensorData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const E3SensorData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const E3SensorData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:E3SensorData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:E3SensorData)
    MergeFrom(*source);
  }
}

void E3SensorData::MergeFrom(const E3SensorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:E3SensorData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.sensorname().size() > 0) {

    sensorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensorname_);
  }
  if (from.numvehiclespresent() != 0) {
    set_numvehiclespresent(from.numvehiclespresent());
  }
}

void E3SensorData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:E3SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E3SensorData::CopyFrom(const E3SensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:E3SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E3SensorData::IsInitialized() const {

  return true;
}

void E3SensorData::Swap(E3SensorData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void E3SensorData::InternalSwap(E3SensorData* other) {
  sensorname_.Swap(&other->sensorname_);
  std::swap(numvehiclespresent_, other->numvehiclespresent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata E3SensorData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E3SensorData_descriptor_;
  metadata.reflection = E3SensorData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// E3SensorData

// optional string sensorName = 1;
void E3SensorData::clear_sensorname() {
  sensorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& E3SensorData::sensorname() const {
  // @@protoc_insertion_point(field_get:E3SensorData.sensorName)
  return sensorname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void E3SensorData::set_sensorname(const ::std::string& value) {
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:E3SensorData.sensorName)
}
 void E3SensorData::set_sensorname(const char* value) {
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:E3SensorData.sensorName)
}
 void E3SensorData::set_sensorname(const char* value, size_t size) {
  
  sensorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:E3SensorData.sensorName)
}
 ::std::string* E3SensorData::mutable_sensorname() {
  
  // @@protoc_insertion_point(field_mutable:E3SensorData.sensorName)
  return sensorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* E3SensorData::release_sensorname() {
  // @@protoc_insertion_point(field_release:E3SensorData.sensorName)
  
  return sensorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void E3SensorData::set_allocated_sensorname(::std::string* sensorname) {
  if (sensorname != NULL) {
    
  } else {
    
  }
  sensorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensorname);
  // @@protoc_insertion_point(field_set_allocated:E3SensorData.sensorName)
}

// optional uint64 numVehiclesPresent = 2;
void E3SensorData::clear_numvehiclespresent() {
  numvehiclespresent_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 E3SensorData::numvehiclespresent() const {
  // @@protoc_insertion_point(field_get:E3SensorData.numVehiclesPresent)
  return numvehiclespresent_;
}
 void E3SensorData::set_numvehiclespresent(::google::protobuf::uint64 value) {
  
  numvehiclespresent_ = value;
  // @@protoc_insertion_point(field_set:E3SensorData.numVehiclesPresent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLightState::kTrafficLightNameFieldNumber;
const int TrafficLightState::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLightState::TrafficLightState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TrafficLightState)
}

void TrafficLightState::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TrafficLightState::TrafficLightState(const TrafficLightState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TrafficLightState)
}

void TrafficLightState::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  trafficlightname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TrafficLightState::~TrafficLightState() {
  // @@protoc_insertion_point(destructor:TrafficLightState)
  SharedDtor();
}

void TrafficLightState::SharedDtor() {
  trafficlightname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TrafficLightState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLightState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficLightState_descriptor_;
}

const TrafficLightState& TrafficLightState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fhil_2eproto();
  return *default_instance_;
}

TrafficLightState* TrafficLightState::default_instance_ = NULL;

TrafficLightState* TrafficLightState::New(::google::protobuf::Arena* arena) const {
  TrafficLightState* n = new TrafficLightState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLightState::Clear() {
// @@protoc_insertion_point(message_clear_start:TrafficLightState)
  trafficlightname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TrafficLightState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TrafficLightState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string trafficLightName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trafficlightname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trafficlightname().data(), this->trafficlightname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TrafficLightState.trafficLightName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }

      // optional string state = 2;
      case 2: {
        if (tag == 18) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TrafficLightState.state"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TrafficLightState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TrafficLightState)
  return false;
#undef DO_
}

void TrafficLightState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TrafficLightState)
  // optional string trafficLightName = 1;
  if (this->trafficlightname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trafficlightname().data(), this->trafficlightname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TrafficLightState.trafficLightName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->trafficlightname(), output);
  }

  // optional string state = 2;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TrafficLightState.state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->state(), output);
  }

  // @@protoc_insertion_point(serialize_end:TrafficLightState)
}

::google::protobuf::uint8* TrafficLightState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TrafficLightState)
  // optional string trafficLightName = 1;
  if (this->trafficlightname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trafficlightname().data(), this->trafficlightname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TrafficLightState.trafficLightName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->trafficlightname(), target);
  }

  // optional string state = 2;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TrafficLightState.state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:TrafficLightState)
  return target;
}

int TrafficLightState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:TrafficLightState)
  int total_size = 0;

  // optional string trafficLightName = 1;
  if (this->trafficlightname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trafficlightname());
  }

  // optional string state = 2;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->state());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLightState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TrafficLightState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TrafficLightState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLightState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TrafficLightState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TrafficLightState)
    MergeFrom(*source);
  }
}

void TrafficLightState::MergeFrom(const TrafficLightState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TrafficLightState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.trafficlightname().size() > 0) {

    trafficlightname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trafficlightname_);
  }
  if (from.state().size() > 0) {

    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
}

void TrafficLightState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TrafficLightState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightState::CopyFrom(const TrafficLightState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TrafficLightState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightState::IsInitialized() const {

  return true;
}

void TrafficLightState::Swap(TrafficLightState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLightState::InternalSwap(TrafficLightState* other) {
  trafficlightname_.Swap(&other->trafficlightname_);
  state_.Swap(&other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLightState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrafficLightState_descriptor_;
  metadata.reflection = TrafficLightState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficLightState

// optional string trafficLightName = 1;
void TrafficLightState::clear_trafficlightname() {
  trafficlightname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TrafficLightState::trafficlightname() const {
  // @@protoc_insertion_point(field_get:TrafficLightState.trafficLightName)
  return trafficlightname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrafficLightState::set_trafficlightname(const ::std::string& value) {
  
  trafficlightname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TrafficLightState.trafficLightName)
}
 void TrafficLightState::set_trafficlightname(const char* value) {
  
  trafficlightname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TrafficLightState.trafficLightName)
}
 void TrafficLightState::set_trafficlightname(const char* value, size_t size) {
  
  trafficlightname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TrafficLightState.trafficLightName)
}
 ::std::string* TrafficLightState::mutable_trafficlightname() {
  
  // @@protoc_insertion_point(field_mutable:TrafficLightState.trafficLightName)
  return trafficlightname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TrafficLightState::release_trafficlightname() {
  // @@protoc_insertion_point(field_release:TrafficLightState.trafficLightName)
  
  return trafficlightname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrafficLightState::set_allocated_trafficlightname(::std::string* trafficlightname) {
  if (trafficlightname != NULL) {
    
  } else {
    
  }
  trafficlightname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trafficlightname);
  // @@protoc_insertion_point(field_set_allocated:TrafficLightState.trafficLightName)
}

// optional string state = 2;
void TrafficLightState::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TrafficLightState::state() const {
  // @@protoc_insertion_point(field_get:TrafficLightState.state)
  return state_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrafficLightState::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TrafficLightState.state)
}
 void TrafficLightState::set_state(const char* value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TrafficLightState.state)
}
 void TrafficLightState::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TrafficLightState.state)
}
 ::std::string* TrafficLightState::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:TrafficLightState.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TrafficLightState::release_state() {
  // @@protoc_insertion_point(field_release:TrafficLightState.state)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrafficLightState::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:TrafficLightState.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
