// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/service_interface.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/service_interface.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Base_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Base_reflection_ = NULL;
const ::google::protobuf::Descriptor* Requirements_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Requirements_reflection_ = NULL;
const ::google::protobuf::Descriptor* Connect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Connect_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* Time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Time_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetworkPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* AbstractData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AbstractData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stream_reflection_ = NULL;
const ::google::protobuf::Descriptor* Service_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Service_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fservice_5finterface_2eproto() {
  protobuf_AddDesc_proto_2fservice_5finterface_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/service_interface.proto");
  GOOGLE_CHECK(file != NULL);
  Base_descriptor_ = file->message_type(0);
  static const int Base_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, message_data_),
  };
  Base_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Base_descriptor_,
      Base::default_instance_,
      Base_offsets_,
      -1,
      -1,
      -1,
      sizeof(Base),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, _is_default_instance_));
  Requirements_descriptor_ = file->message_type(1);
  static const int Requirements_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Requirements, services_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Requirements, streams_),
  };
  Requirements_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Requirements_descriptor_,
      Requirements::default_instance_,
      Requirements_offsets_,
      -1,
      -1,
      -1,
      sizeof(Requirements),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Requirements, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Requirements, _is_default_instance_));
  Connect_descriptor_ = file->message_type(2);
  static const int Connect_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect, federation_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect, auth_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect, requirements_),
  };
  Connect_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Connect_descriptor_,
      Connect::default_instance_,
      Connect_offsets_,
      -1,
      -1,
      -1,
      sizeof(Connect),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect, _is_default_instance_));
  Response_descriptor_ = file->message_type(3);
  static const int Response_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, value_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      -1,
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _is_default_instance_));
  Node_descriptor_ = file->message_type(4);
  static const int Node_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, address_),
  };
  Node_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Node_descriptor_,
      Node::default_instance_,
      Node_offsets_,
      -1,
      -1,
      -1,
      sizeof(Node),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _is_default_instance_));
  Time_descriptor_ = file->message_type(5);
  static const int Time_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, seconds_),
  };
  Time_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Time_descriptor_,
      Time::default_instance_,
      Time_offsets_,
      -1,
      -1,
      -1,
      sizeof(Time),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, _is_default_instance_));
  NetworkPacket_descriptor_ = file->message_type(6);
  static const int NetworkPacket_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkPacket, destinations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkPacket, data_),
  };
  NetworkPacket_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetworkPacket_descriptor_,
      NetworkPacket::default_instance_,
      NetworkPacket_offsets_,
      -1,
      -1,
      -1,
      sizeof(NetworkPacket),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkPacket, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkPacket, _is_default_instance_));
  AbstractData_descriptor_ = file->message_type(7);
  static const int AbstractData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractData, data_),
  };
  AbstractData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AbstractData_descriptor_,
      AbstractData::default_instance_,
      AbstractData_offsets_,
      -1,
      -1,
      -1,
      sizeof(AbstractData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractData, _is_default_instance_));
  Stream_descriptor_ = file->message_type(8);
  static const int Stream_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, interval_),
  };
  Stream_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Stream_descriptor_,
      Stream::default_instance_,
      Stream_offsets_,
      -1,
      -1,
      -1,
      sizeof(Stream),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, _is_default_instance_));
  Service_descriptor_ = file->message_type(9);
  static const int Service_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, destinations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, command_),
  };
  Service_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Service_descriptor_,
      Service::default_instance_,
      Service_offsets_,
      -1,
      -1,
      -1,
      sizeof(Service),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fservice_5finterface_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Base_descriptor_, &Base::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Requirements_descriptor_, &Requirements::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Connect_descriptor_, &Connect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Node_descriptor_, &Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Time_descriptor_, &Time::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetworkPacket_descriptor_, &NetworkPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AbstractData_descriptor_, &AbstractData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Stream_descriptor_, &Stream::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Service_descriptor_, &Service::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fservice_5finterface_2eproto() {
  delete Base::default_instance_;
  delete Base_reflection_;
  delete Requirements::default_instance_;
  delete Requirements_reflection_;
  delete Connect::default_instance_;
  delete Connect_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete Node::default_instance_;
  delete Node_reflection_;
  delete Time::default_instance_;
  delete Time_reflection_;
  delete NetworkPacket::default_instance_;
  delete NetworkPacket_reflection_;
  delete AbstractData::default_instance_;
  delete AbstractData_reflection_;
  delete Stream::default_instance_;
  delete Stream_reflection_;
  delete Service::default_instance_;
  delete Service_reflection_;
}

void protobuf_AddDesc_proto_2fservice_5finterface_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035proto/service_interface.proto\"2\n\004Base\022"
    "\024\n\014message_type\030\001 \001(\t\022\024\n\014message_data\030\002 "
    "\001(\t\"D\n\014Requirements\022\032\n\010services\030\001 \003(\0132\010."
    "Service\022\030\n\007streams\030\002 \003(\0132\007.Stream\"Z\n\007Con"
    "nect\022\027\n\017federation_name\030\001 \001(\t\022\021\n\tauth_da"
    "ta\030\002 \001(\014\022#\n\014requirements\030\003 \001(\0132\r.Require"
    "ments\"8\n\010Response\022\014\n\004code\030\001 \001(\003\022\017\n\007messa"
    "ge\030\002 \001(\t\022\r\n\005value\030\003 \001(\014\"%\n\004Node\022\014\n\004name\030"
    "\001 \001(\t\022\017\n\007address\030\002 \001(\t\"\027\n\004Time\022\017\n\007second"
    "s\030\001 \001(\001\":\n\rNetworkPacket\022\033\n\014destinations"
    "\030\001 \003(\0132\005.Node\022\014\n\004data\030\002 \001(\014\"8\n\014AbstractD"
    "ata\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\014\n\004data\030"
    "\003 \001(\014\"U\n\006Stream\022\025\n\006source\030\001 \001(\0132\005.Node\022\033"
    "\n\004data\030\002 \001(\0132\r.AbstractData\022\027\n\010interval\030"
    "\003 \001(\0132\005.Time\"F\n\007Service\022\033\n\014destinations\030"
    "\001 \003(\0132\005.Node\022\036\n\007command\030\002 \001(\0132\r.Abstract"
    "Datab\006proto3", 652);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/service_interface.proto", &protobuf_RegisterTypes);
  Base::default_instance_ = new Base();
  Requirements::default_instance_ = new Requirements();
  Connect::default_instance_ = new Connect();
  Response::default_instance_ = new Response();
  Node::default_instance_ = new Node();
  Time::default_instance_ = new Time();
  NetworkPacket::default_instance_ = new NetworkPacket();
  AbstractData::default_instance_ = new AbstractData();
  Stream::default_instance_ = new Stream();
  Service::default_instance_ = new Service();
  Base::default_instance_->InitAsDefaultInstance();
  Requirements::default_instance_->InitAsDefaultInstance();
  Connect::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  Node::default_instance_->InitAsDefaultInstance();
  Time::default_instance_->InitAsDefaultInstance();
  NetworkPacket::default_instance_->InitAsDefaultInstance();
  AbstractData::default_instance_->InitAsDefaultInstance();
  Stream::default_instance_->InitAsDefaultInstance();
  Service::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fservice_5finterface_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fservice_5finterface_2eproto {
  StaticDescriptorInitializer_proto_2fservice_5finterface_2eproto() {
    protobuf_AddDesc_proto_2fservice_5finterface_2eproto();
  }
} static_descriptor_initializer_proto_2fservice_5finterface_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Base::kMessageTypeFieldNumber;
const int Base::kMessageDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Base::Base()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Base)
}

void Base::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Base::Base(const Base& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Base)
}

void Base::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Base::~Base() {
  // @@protoc_insertion_point(destructor:Base)
  SharedDtor();
}

void Base::SharedDtor() {
  message_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Base::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Base_descriptor_;
}

const Base& Base::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fservice_5finterface_2eproto();
  return *default_instance_;
}

Base* Base::default_instance_ = NULL;

Base* Base::New(::google::protobuf::Arena* arena) const {
  Base* n = new Base;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Base::Clear() {
// @@protoc_insertion_point(message_clear_start:Base)
  message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Base)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message_type().data(), this->message_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Base.message_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message_data;
        break;
      }

      // optional string message_data = 2;
      case 2: {
        if (tag == 18) {
         parse_message_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message_data().data(), this->message_data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Base.message_data"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Base)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Base)
  return false;
#undef DO_
}

void Base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Base)
  // optional string message_type = 1;
  if (this->message_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_type().data(), this->message_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Base.message_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message_type(), output);
  }

  // optional string message_data = 2;
  if (this->message_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_data().data(), this->message_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Base.message_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:Base)
}

::google::protobuf::uint8* Base::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Base)
  // optional string message_type = 1;
  if (this->message_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_type().data(), this->message_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Base.message_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message_type(), target);
  }

  // optional string message_data = 2;
  if (this->message_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_data().data(), this->message_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Base.message_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message_data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Base)
  return target;
}

int Base::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Base)
  int total_size = 0;

  // optional string message_type = 1;
  if (this->message_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_type());
  }

  // optional string message_data = 2;
  if (this->message_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Base::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Base)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Base* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Base>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Base)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Base)
    MergeFrom(*source);
  }
}

void Base::MergeFrom(const Base& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Base)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.message_type().size() > 0) {

    message_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_type_);
  }
  if (from.message_data().size() > 0) {

    message_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_data_);
  }
}

void Base::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Base)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Base::CopyFrom(const Base& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Base)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Base::IsInitialized() const {

  return true;
}

void Base::Swap(Base* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Base::InternalSwap(Base* other) {
  message_type_.Swap(&other->message_type_);
  message_data_.Swap(&other->message_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Base::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Base_descriptor_;
  metadata.reflection = Base_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Base

// optional string message_type = 1;
void Base::clear_message_type() {
  message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Base::message_type() const {
  // @@protoc_insertion_point(field_get:Base.message_type)
  return message_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Base::set_message_type(const ::std::string& value) {
  
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Base.message_type)
}
 void Base::set_message_type(const char* value) {
  
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Base.message_type)
}
 void Base::set_message_type(const char* value, size_t size) {
  
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Base.message_type)
}
 ::std::string* Base::mutable_message_type() {
  
  // @@protoc_insertion_point(field_mutable:Base.message_type)
  return message_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Base::release_message_type() {
  // @@protoc_insertion_point(field_release:Base.message_type)
  
  return message_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Base::set_allocated_message_type(::std::string* message_type) {
  if (message_type != NULL) {
    
  } else {
    
  }
  message_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_type);
  // @@protoc_insertion_point(field_set_allocated:Base.message_type)
}

// optional string message_data = 2;
void Base::clear_message_data() {
  message_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Base::message_data() const {
  // @@protoc_insertion_point(field_get:Base.message_data)
  return message_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Base::set_message_data(const ::std::string& value) {
  
  message_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Base.message_data)
}
 void Base::set_message_data(const char* value) {
  
  message_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Base.message_data)
}
 void Base::set_message_data(const char* value, size_t size) {
  
  message_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Base.message_data)
}
 ::std::string* Base::mutable_message_data() {
  
  // @@protoc_insertion_point(field_mutable:Base.message_data)
  return message_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Base::release_message_data() {
  // @@protoc_insertion_point(field_release:Base.message_data)
  
  return message_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Base::set_allocated_message_data(::std::string* message_data) {
  if (message_data != NULL) {
    
  } else {
    
  }
  message_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_data);
  // @@protoc_insertion_point(field_set_allocated:Base.message_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Requirements::kServicesFieldNumber;
const int Requirements::kStreamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Requirements::Requirements()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Requirements)
}

void Requirements::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Requirements::Requirements(const Requirements& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Requirements)
}

void Requirements::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Requirements::~Requirements() {
  // @@protoc_insertion_point(destructor:Requirements)
  SharedDtor();
}

void Requirements::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Requirements::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Requirements::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Requirements_descriptor_;
}

const Requirements& Requirements::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fservice_5finterface_2eproto();
  return *default_instance_;
}

Requirements* Requirements::default_instance_ = NULL;

Requirements* Requirements::New(::google::protobuf::Arena* arena) const {
  Requirements* n = new Requirements;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Requirements::Clear() {
// @@protoc_insertion_point(message_clear_start:Requirements)
  services_.Clear();
  streams_.Clear();
}

bool Requirements::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Requirements)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Service services = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_services:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_services()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_services;
        if (input->ExpectTag(18)) goto parse_loop_streams;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .Stream streams = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_streams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_streams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_streams;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Requirements)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Requirements)
  return false;
#undef DO_
}

void Requirements::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Requirements)
  // repeated .Service services = 1;
  for (unsigned int i = 0, n = this->services_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->services(i), output);
  }

  // repeated .Stream streams = 2;
  for (unsigned int i = 0, n = this->streams_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->streams(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Requirements)
}

::google::protobuf::uint8* Requirements::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Requirements)
  // repeated .Service services = 1;
  for (unsigned int i = 0, n = this->services_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->services(i), false, target);
  }

  // repeated .Stream streams = 2;
  for (unsigned int i = 0, n = this->streams_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->streams(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Requirements)
  return target;
}

int Requirements::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Requirements)
  int total_size = 0;

  // repeated .Service services = 1;
  total_size += 1 * this->services_size();
  for (int i = 0; i < this->services_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->services(i));
  }

  // repeated .Stream streams = 2;
  total_size += 1 * this->streams_size();
  for (int i = 0; i < this->streams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->streams(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Requirements::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Requirements)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Requirements* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Requirements>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Requirements)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Requirements)
    MergeFrom(*source);
  }
}

void Requirements::MergeFrom(const Requirements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Requirements)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  services_.MergeFrom(from.services_);
  streams_.MergeFrom(from.streams_);
}

void Requirements::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Requirements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Requirements::CopyFrom(const Requirements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Requirements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Requirements::IsInitialized() const {

  return true;
}

void Requirements::Swap(Requirements* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Requirements::InternalSwap(Requirements* other) {
  services_.UnsafeArenaSwap(&other->services_);
  streams_.UnsafeArenaSwap(&other->streams_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Requirements::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Requirements_descriptor_;
  metadata.reflection = Requirements_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Requirements

// repeated .Service services = 1;
int Requirements::services_size() const {
  return services_.size();
}
void Requirements::clear_services() {
  services_.Clear();
}
const ::Service& Requirements::services(int index) const {
  // @@protoc_insertion_point(field_get:Requirements.services)
  return services_.Get(index);
}
::Service* Requirements::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:Requirements.services)
  return services_.Mutable(index);
}
::Service* Requirements::add_services() {
  // @@protoc_insertion_point(field_add:Requirements.services)
  return services_.Add();
}
::google::protobuf::RepeatedPtrField< ::Service >*
Requirements::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:Requirements.services)
  return &services_;
}
const ::google::protobuf::RepeatedPtrField< ::Service >&
Requirements::services() const {
  // @@protoc_insertion_point(field_list:Requirements.services)
  return services_;
}

// repeated .Stream streams = 2;
int Requirements::streams_size() const {
  return streams_.size();
}
void Requirements::clear_streams() {
  streams_.Clear();
}
const ::Stream& Requirements::streams(int index) const {
  // @@protoc_insertion_point(field_get:Requirements.streams)
  return streams_.Get(index);
}
::Stream* Requirements::mutable_streams(int index) {
  // @@protoc_insertion_point(field_mutable:Requirements.streams)
  return streams_.Mutable(index);
}
::Stream* Requirements::add_streams() {
  // @@protoc_insertion_point(field_add:Requirements.streams)
  return streams_.Add();
}
::google::protobuf::RepeatedPtrField< ::Stream >*
Requirements::mutable_streams() {
  // @@protoc_insertion_point(field_mutable_list:Requirements.streams)
  return &streams_;
}
const ::google::protobuf::RepeatedPtrField< ::Stream >&
Requirements::streams() const {
  // @@protoc_insertion_point(field_list:Requirements.streams)
  return streams_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Connect::kFederationNameFieldNumber;
const int Connect::kAuthDataFieldNumber;
const int Connect::kRequirementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Connect::Connect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Connect)
}

void Connect::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  requirements_ = const_cast< ::Requirements*>(&::Requirements::default_instance());
}

Connect::Connect(const Connect& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Connect)
}

void Connect::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  federation_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requirements_ = NULL;
}

Connect::~Connect() {
  // @@protoc_insertion_point(destructor:Connect)
  SharedDtor();
}

void Connect::SharedDtor() {
  federation_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete requirements_;
  }
}

void Connect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Connect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Connect_descriptor_;
}

const Connect& Connect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fservice_5finterface_2eproto();
  return *default_instance_;
}

Connect* Connect::default_instance_ = NULL;

Connect* Connect::New(::google::protobuf::Arena* arena) const {
  Connect* n = new Connect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Connect::Clear() {
// @@protoc_insertion_point(message_clear_start:Connect)
  federation_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && requirements_ != NULL) delete requirements_;
  requirements_ = NULL;
}

bool Connect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Connect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string federation_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_federation_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->federation_name().data(), this->federation_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Connect.federation_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_auth_data;
        break;
      }

      // optional bytes auth_data = 2;
      case 2: {
        if (tag == 18) {
         parse_auth_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_auth_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_requirements;
        break;
      }

      // optional .Requirements requirements = 3;
      case 3: {
        if (tag == 26) {
         parse_requirements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requirements()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Connect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Connect)
  return false;
#undef DO_
}

void Connect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Connect)
  // optional string federation_name = 1;
  if (this->federation_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->federation_name().data(), this->federation_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Connect.federation_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->federation_name(), output);
  }

  // optional bytes auth_data = 2;
  if (this->auth_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->auth_data(), output);
  }

  // optional .Requirements requirements = 3;
  if (this->has_requirements()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->requirements_, output);
  }

  // @@protoc_insertion_point(serialize_end:Connect)
}

::google::protobuf::uint8* Connect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Connect)
  // optional string federation_name = 1;
  if (this->federation_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->federation_name().data(), this->federation_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Connect.federation_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->federation_name(), target);
  }

  // optional bytes auth_data = 2;
  if (this->auth_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->auth_data(), target);
  }

  // optional .Requirements requirements = 3;
  if (this->has_requirements()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->requirements_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Connect)
  return target;
}

int Connect::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Connect)
  int total_size = 0;

  // optional string federation_name = 1;
  if (this->federation_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->federation_name());
  }

  // optional bytes auth_data = 2;
  if (this->auth_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->auth_data());
  }

  // optional .Requirements requirements = 3;
  if (this->has_requirements()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->requirements_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Connect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Connect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Connect* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Connect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Connect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Connect)
    MergeFrom(*source);
  }
}

void Connect::MergeFrom(const Connect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Connect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.federation_name().size() > 0) {

    federation_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.federation_name_);
  }
  if (from.auth_data().size() > 0) {

    auth_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_data_);
  }
  if (from.has_requirements()) {
    mutable_requirements()->::Requirements::MergeFrom(from.requirements());
  }
}

void Connect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Connect::CopyFrom(const Connect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connect::IsInitialized() const {

  return true;
}

void Connect::Swap(Connect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Connect::InternalSwap(Connect* other) {
  federation_name_.Swap(&other->federation_name_);
  auth_data_.Swap(&other->auth_data_);
  std::swap(requirements_, other->requirements_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Connect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Connect_descriptor_;
  metadata.reflection = Connect_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Connect

// optional string federation_name = 1;
void Connect::clear_federation_name() {
  federation_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Connect::federation_name() const {
  // @@protoc_insertion_point(field_get:Connect.federation_name)
  return federation_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Connect::set_federation_name(const ::std::string& value) {
  
  federation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Connect.federation_name)
}
 void Connect::set_federation_name(const char* value) {
  
  federation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Connect.federation_name)
}
 void Connect::set_federation_name(const char* value, size_t size) {
  
  federation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Connect.federation_name)
}
 ::std::string* Connect::mutable_federation_name() {
  
  // @@protoc_insertion_point(field_mutable:Connect.federation_name)
  return federation_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Connect::release_federation_name() {
  // @@protoc_insertion_point(field_release:Connect.federation_name)
  
  return federation_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Connect::set_allocated_federation_name(::std::string* federation_name) {
  if (federation_name != NULL) {
    
  } else {
    
  }
  federation_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), federation_name);
  // @@protoc_insertion_point(field_set_allocated:Connect.federation_name)
}

// optional bytes auth_data = 2;
void Connect::clear_auth_data() {
  auth_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Connect::auth_data() const {
  // @@protoc_insertion_point(field_get:Connect.auth_data)
  return auth_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Connect::set_auth_data(const ::std::string& value) {
  
  auth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Connect.auth_data)
}
 void Connect::set_auth_data(const char* value) {
  
  auth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Connect.auth_data)
}
 void Connect::set_auth_data(const void* value, size_t size) {
  
  auth_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Connect.auth_data)
}
 ::std::string* Connect::mutable_auth_data() {
  
  // @@protoc_insertion_point(field_mutable:Connect.auth_data)
  return auth_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Connect::release_auth_data() {
  // @@protoc_insertion_point(field_release:Connect.auth_data)
  
  return auth_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Connect::set_allocated_auth_data(::std::string* auth_data) {
  if (auth_data != NULL) {
    
  } else {
    
  }
  auth_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_data);
  // @@protoc_insertion_point(field_set_allocated:Connect.auth_data)
}

// optional .Requirements requirements = 3;
bool Connect::has_requirements() const {
  return !_is_default_instance_ && requirements_ != NULL;
}
void Connect::clear_requirements() {
  if (GetArenaNoVirtual() == NULL && requirements_ != NULL) delete requirements_;
  requirements_ = NULL;
}
const ::Requirements& Connect::requirements() const {
  // @@protoc_insertion_point(field_get:Connect.requirements)
  return requirements_ != NULL ? *requirements_ : *default_instance_->requirements_;
}
::Requirements* Connect::mutable_requirements() {
  
  if (requirements_ == NULL) {
    requirements_ = new ::Requirements;
  }
  // @@protoc_insertion_point(field_mutable:Connect.requirements)
  return requirements_;
}
::Requirements* Connect::release_requirements() {
  // @@protoc_insertion_point(field_release:Connect.requirements)
  
  ::Requirements* temp = requirements_;
  requirements_ = NULL;
  return temp;
}
void Connect::set_allocated_requirements(::Requirements* requirements) {
  delete requirements_;
  requirements_ = requirements;
  if (requirements) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Connect.requirements)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kCodeFieldNumber;
const int Response::kMessageFieldNumber;
const int Response::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Response)
}

void Response::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Response)
}

void Response::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = GOOGLE_LONGLONG(0);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:Response)
  SharedDtor();
}

void Response::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fservice_5finterface_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Response)
  code_ = GOOGLE_LONGLONG(0);
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Response.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional bytes value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Response)
  // optional int64 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->code(), output);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Response.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // optional bytes value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Response)
  // optional int64 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->code(), target);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Response.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional bytes value = 3;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Response)
  return target;
}

int Response::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Response)
  int total_size = 0;

  // optional int64 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->code());
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // optional bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(code_, other->code_);
  message_.Swap(&other->message_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional int64 code = 1;
void Response::clear_code() {
  code_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Response::code() const {
  // @@protoc_insertion_point(field_get:Response.code)
  return code_;
}
 void Response::set_code(::google::protobuf::int64 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:Response.code)
}

// optional string message = 2;
void Response::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Response::message() const {
  // @@protoc_insertion_point(field_get:Response.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Response.message)
}
 void Response::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Response.message)
}
 void Response::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Response.message)
}
 ::std::string* Response::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:Response.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response::release_message() {
  // @@protoc_insertion_point(field_release:Response.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:Response.message)
}

// optional bytes value = 3;
void Response::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Response::value() const {
  // @@protoc_insertion_point(field_get:Response.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Response.value)
}
 void Response::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Response.value)
}
 void Response::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Response.value)
}
 ::std::string* Response::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:Response.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response::release_value() {
  // @@protoc_insertion_point(field_release:Response.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Response.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kNameFieldNumber;
const int Node::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Node)
}

void Node::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Node::Node(const Node& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Node)
}

void Node::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:Node)
  SharedDtor();
}

void Node::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_descriptor_;
}

const Node& Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fservice_5finterface_2eproto();
  return *default_instance_;
}

Node* Node::default_instance_ = NULL;

Node* Node::New(::google::protobuf::Arena* arena) const {
  Node* n = new Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:Node)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Node.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }

      // optional string address = 2;
      case 2: {
        if (tag == 18) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Node.address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Node)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Node.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Node.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  // @@protoc_insertion_point(serialize_end:Node)
}

::google::protobuf::uint8* Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Node)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Node.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Node.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Node)
  return target;
}

int Node::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Node)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Node)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Node* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Node)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {

  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  name_.Swap(&other->name_);
  address_.Swap(&other->address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_descriptor_;
  metadata.reflection = Node_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node

// optional string name = 1;
void Node::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Node::name() const {
  // @@protoc_insertion_point(field_get:Node.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Node.name)
}
 void Node::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Node.name)
}
 void Node::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Node.name)
}
 ::std::string* Node::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Node.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Node::release_name() {
  // @@protoc_insertion_point(field_release:Node.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Node.name)
}

// optional string address = 2;
void Node::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Node::address() const {
  // @@protoc_insertion_point(field_get:Node.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Node.address)
}
 void Node::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Node.address)
}
 void Node::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Node.address)
}
 ::std::string* Node::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:Node.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Node::release_address() {
  // @@protoc_insertion_point(field_release:Node.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:Node.address)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Time::kSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Time::Time()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Time)
}

void Time::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Time::Time(const Time& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Time)
}

void Time::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  seconds_ = 0;
}

Time::~Time() {
  // @@protoc_insertion_point(destructor:Time)
  SharedDtor();
}

void Time::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Time_descriptor_;
}

const Time& Time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fservice_5finterface_2eproto();
  return *default_instance_;
}

Time* Time::default_instance_ = NULL;

Time* Time::New(::google::protobuf::Arena* arena) const {
  Time* n = new Time;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Time::Clear() {
// @@protoc_insertion_point(message_clear_start:Time)
  seconds_ = 0;
}

bool Time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Time)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double seconds = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &seconds_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Time)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Time)
  return false;
#undef DO_
}

void Time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Time)
  // optional double seconds = 1;
  if (this->seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->seconds(), output);
  }

  // @@protoc_insertion_point(serialize_end:Time)
}

::google::protobuf::uint8* Time::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Time)
  // optional double seconds = 1;
  if (this->seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->seconds(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Time)
  return target;
}

int Time::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Time)
  int total_size = 0;

  // optional double seconds = 1;
  if (this->seconds() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Time::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Time)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Time* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Time>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Time)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Time)
    MergeFrom(*source);
  }
}

void Time::MergeFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Time)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.seconds() != 0) {
    set_seconds(from.seconds());
  }
}

void Time::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Time::CopyFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Time::IsInitialized() const {

  return true;
}

void Time::Swap(Time* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Time::InternalSwap(Time* other) {
  std::swap(seconds_, other->seconds_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Time_descriptor_;
  metadata.reflection = Time_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Time

// optional double seconds = 1;
void Time::clear_seconds() {
  seconds_ = 0;
}
 double Time::seconds() const {
  // @@protoc_insertion_point(field_get:Time.seconds)
  return seconds_;
}
 void Time::set_seconds(double value) {
  
  seconds_ = value;
  // @@protoc_insertion_point(field_set:Time.seconds)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkPacket::kDestinationsFieldNumber;
const int NetworkPacket::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkPacket::NetworkPacket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetworkPacket)
}

void NetworkPacket::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NetworkPacket::NetworkPacket(const NetworkPacket& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetworkPacket)
}

void NetworkPacket::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NetworkPacket::~NetworkPacket() {
  // @@protoc_insertion_point(destructor:NetworkPacket)
  SharedDtor();
}

void NetworkPacket::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NetworkPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkPacket_descriptor_;
}

const NetworkPacket& NetworkPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fservice_5finterface_2eproto();
  return *default_instance_;
}

NetworkPacket* NetworkPacket::default_instance_ = NULL;

NetworkPacket* NetworkPacket::New(::google::protobuf::Arena* arena) const {
  NetworkPacket* n = new NetworkPacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:NetworkPacket)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destinations_.Clear();
}

bool NetworkPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetworkPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Node destinations = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_destinations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_destinations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_destinations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetworkPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetworkPacket)
  return false;
#undef DO_
}

void NetworkPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetworkPacket)
  // repeated .Node destinations = 1;
  for (unsigned int i = 0, n = this->destinations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->destinations(i), output);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:NetworkPacket)
}

::google::protobuf::uint8* NetworkPacket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetworkPacket)
  // repeated .Node destinations = 1;
  for (unsigned int i = 0, n = this->destinations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->destinations(i), false, target);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NetworkPacket)
  return target;
}

int NetworkPacket::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:NetworkPacket)
  int total_size = 0;

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // repeated .Node destinations = 1;
  total_size += 1 * this->destinations_size();
  for (int i = 0; i < this->destinations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->destinations(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkPacket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetworkPacket)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NetworkPacket* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkPacket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetworkPacket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetworkPacket)
    MergeFrom(*source);
  }
}

void NetworkPacket::MergeFrom(const NetworkPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetworkPacket)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  destinations_.MergeFrom(from.destinations_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void NetworkPacket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetworkPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkPacket::CopyFrom(const NetworkPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetworkPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkPacket::IsInitialized() const {

  return true;
}

void NetworkPacket::Swap(NetworkPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkPacket::InternalSwap(NetworkPacket* other) {
  destinations_.UnsafeArenaSwap(&other->destinations_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkPacket_descriptor_;
  metadata.reflection = NetworkPacket_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkPacket

// repeated .Node destinations = 1;
int NetworkPacket::destinations_size() const {
  return destinations_.size();
}
void NetworkPacket::clear_destinations() {
  destinations_.Clear();
}
const ::Node& NetworkPacket::destinations(int index) const {
  // @@protoc_insertion_point(field_get:NetworkPacket.destinations)
  return destinations_.Get(index);
}
::Node* NetworkPacket::mutable_destinations(int index) {
  // @@protoc_insertion_point(field_mutable:NetworkPacket.destinations)
  return destinations_.Mutable(index);
}
::Node* NetworkPacket::add_destinations() {
  // @@protoc_insertion_point(field_add:NetworkPacket.destinations)
  return destinations_.Add();
}
::google::protobuf::RepeatedPtrField< ::Node >*
NetworkPacket::mutable_destinations() {
  // @@protoc_insertion_point(field_mutable_list:NetworkPacket.destinations)
  return &destinations_;
}
const ::google::protobuf::RepeatedPtrField< ::Node >&
NetworkPacket::destinations() const {
  // @@protoc_insertion_point(field_list:NetworkPacket.destinations)
  return destinations_;
}

// optional bytes data = 2;
void NetworkPacket::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NetworkPacket::data() const {
  // @@protoc_insertion_point(field_get:NetworkPacket.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NetworkPacket::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetworkPacket.data)
}
 void NetworkPacket::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetworkPacket.data)
}
 void NetworkPacket::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetworkPacket.data)
}
 ::std::string* NetworkPacket::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:NetworkPacket.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NetworkPacket::release_data() {
  // @@protoc_insertion_point(field_release:NetworkPacket.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NetworkPacket::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:NetworkPacket.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AbstractData::kNameFieldNumber;
const int AbstractData::kTypeFieldNumber;
const int AbstractData::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AbstractData::AbstractData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AbstractData)
}

void AbstractData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AbstractData::AbstractData(const AbstractData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AbstractData)
}

void AbstractData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AbstractData::~AbstractData() {
  // @@protoc_insertion_point(destructor:AbstractData)
  SharedDtor();
}

void AbstractData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AbstractData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AbstractData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AbstractData_descriptor_;
}

const AbstractData& AbstractData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fservice_5finterface_2eproto();
  return *default_instance_;
}

AbstractData* AbstractData::default_instance_ = NULL;

AbstractData* AbstractData::New(::google::protobuf::Arena* arena) const {
  AbstractData* n = new AbstractData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AbstractData::Clear() {
// @@protoc_insertion_point(message_clear_start:AbstractData)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AbstractData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AbstractData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AbstractData.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AbstractData.type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AbstractData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AbstractData)
  return false;
#undef DO_
}

void AbstractData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AbstractData)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AbstractData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AbstractData.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:AbstractData)
}

::google::protobuf::uint8* AbstractData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AbstractData)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AbstractData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AbstractData.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:AbstractData)
  return target;
}

int AbstractData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AbstractData)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AbstractData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AbstractData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AbstractData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AbstractData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AbstractData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AbstractData)
    MergeFrom(*source);
  }
}

void AbstractData::MergeFrom(const AbstractData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AbstractData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void AbstractData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AbstractData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbstractData::CopyFrom(const AbstractData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AbstractData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbstractData::IsInitialized() const {

  return true;
}

void AbstractData::Swap(AbstractData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AbstractData::InternalSwap(AbstractData* other) {
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AbstractData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AbstractData_descriptor_;
  metadata.reflection = AbstractData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AbstractData

// optional string name = 1;
void AbstractData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AbstractData::name() const {
  // @@protoc_insertion_point(field_get:AbstractData.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AbstractData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AbstractData.name)
}
 void AbstractData::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AbstractData.name)
}
 void AbstractData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AbstractData.name)
}
 ::std::string* AbstractData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:AbstractData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AbstractData::release_name() {
  // @@protoc_insertion_point(field_release:AbstractData.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AbstractData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AbstractData.name)
}

// optional string type = 2;
void AbstractData::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AbstractData::type() const {
  // @@protoc_insertion_point(field_get:AbstractData.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AbstractData::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AbstractData.type)
}
 void AbstractData::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AbstractData.type)
}
 void AbstractData::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AbstractData.type)
}
 ::std::string* AbstractData::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:AbstractData.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AbstractData::release_type() {
  // @@protoc_insertion_point(field_release:AbstractData.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AbstractData::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:AbstractData.type)
}

// optional bytes data = 3;
void AbstractData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AbstractData::data() const {
  // @@protoc_insertion_point(field_get:AbstractData.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AbstractData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AbstractData.data)
}
 void AbstractData::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AbstractData.data)
}
 void AbstractData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AbstractData.data)
}
 ::std::string* AbstractData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:AbstractData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AbstractData::release_data() {
  // @@protoc_insertion_point(field_release:AbstractData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AbstractData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:AbstractData.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stream::kSourceFieldNumber;
const int Stream::kDataFieldNumber;
const int Stream::kIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stream::Stream()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Stream)
}

void Stream::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  source_ = const_cast< ::Node*>(&::Node::default_instance());
  data_ = const_cast< ::AbstractData*>(&::AbstractData::default_instance());
  interval_ = const_cast< ::Time*>(&::Time::default_instance());
}

Stream::Stream(const Stream& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Stream)
}

void Stream::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  source_ = NULL;
  data_ = NULL;
  interval_ = NULL;
}

Stream::~Stream() {
  // @@protoc_insertion_point(destructor:Stream)
  SharedDtor();
}

void Stream::SharedDtor() {
  if (this != default_instance_) {
    delete source_;
    delete data_;
    delete interval_;
  }
}

void Stream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stream_descriptor_;
}

const Stream& Stream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fservice_5finterface_2eproto();
  return *default_instance_;
}

Stream* Stream::default_instance_ = NULL;

Stream* Stream::New(::google::protobuf::Arena* arena) const {
  Stream* n = new Stream;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Stream::Clear() {
// @@protoc_insertion_point(message_clear_start:Stream)
  if (GetArenaNoVirtual() == NULL && source_ != NULL) delete source_;
  source_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
  if (GetArenaNoVirtual() == NULL && interval_ != NULL) delete interval_;
  interval_ = NULL;
}

bool Stream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Stream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Node source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .AbstractData data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_interval;
        break;
      }

      // optional .Time interval = 3;
      case 3: {
        if (tag == 26) {
         parse_interval:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interval()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Stream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Stream)
  return false;
#undef DO_
}

void Stream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Stream)
  // optional .Node source = 1;
  if (this->has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->source_, output);
  }

  // optional .AbstractData data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  // optional .Time interval = 3;
  if (this->has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->interval_, output);
  }

  // @@protoc_insertion_point(serialize_end:Stream)
}

::google::protobuf::uint8* Stream::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Stream)
  // optional .Node source = 1;
  if (this->has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->source_, false, target);
  }

  // optional .AbstractData data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->data_, false, target);
  }

  // optional .Time interval = 3;
  if (this->has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->interval_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Stream)
  return target;
}

int Stream::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Stream)
  int total_size = 0;

  // optional .Node source = 1;
  if (this->has_source()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->source_);
  }

  // optional .AbstractData data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  // optional .Time interval = 3;
  if (this->has_interval()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->interval_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Stream)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Stream* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Stream>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Stream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Stream)
    MergeFrom(*source);
  }
}

void Stream::MergeFrom(const Stream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Stream)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_source()) {
    mutable_source()->::Node::MergeFrom(from.source());
  }
  if (from.has_data()) {
    mutable_data()->::AbstractData::MergeFrom(from.data());
  }
  if (from.has_interval()) {
    mutable_interval()->::Time::MergeFrom(from.interval());
  }
}

void Stream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stream::CopyFrom(const Stream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream::IsInitialized() const {

  return true;
}

void Stream::Swap(Stream* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stream::InternalSwap(Stream* other) {
  std::swap(source_, other->source_);
  std::swap(data_, other->data_);
  std::swap(interval_, other->interval_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Stream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stream_descriptor_;
  metadata.reflection = Stream_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Stream

// optional .Node source = 1;
bool Stream::has_source() const {
  return !_is_default_instance_ && source_ != NULL;
}
void Stream::clear_source() {
  if (GetArenaNoVirtual() == NULL && source_ != NULL) delete source_;
  source_ = NULL;
}
const ::Node& Stream::source() const {
  // @@protoc_insertion_point(field_get:Stream.source)
  return source_ != NULL ? *source_ : *default_instance_->source_;
}
::Node* Stream::mutable_source() {
  
  if (source_ == NULL) {
    source_ = new ::Node;
  }
  // @@protoc_insertion_point(field_mutable:Stream.source)
  return source_;
}
::Node* Stream::release_source() {
  // @@protoc_insertion_point(field_release:Stream.source)
  
  ::Node* temp = source_;
  source_ = NULL;
  return temp;
}
void Stream::set_allocated_source(::Node* source) {
  delete source_;
  source_ = source;
  if (source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Stream.source)
}

// optional .AbstractData data = 2;
bool Stream::has_data() const {
  return !_is_default_instance_ && data_ != NULL;
}
void Stream::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::AbstractData& Stream::data() const {
  // @@protoc_insertion_point(field_get:Stream.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
::AbstractData* Stream::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::AbstractData;
  }
  // @@protoc_insertion_point(field_mutable:Stream.data)
  return data_;
}
::AbstractData* Stream::release_data() {
  // @@protoc_insertion_point(field_release:Stream.data)
  
  ::AbstractData* temp = data_;
  data_ = NULL;
  return temp;
}
void Stream::set_allocated_data(::AbstractData* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Stream.data)
}

// optional .Time interval = 3;
bool Stream::has_interval() const {
  return !_is_default_instance_ && interval_ != NULL;
}
void Stream::clear_interval() {
  if (GetArenaNoVirtual() == NULL && interval_ != NULL) delete interval_;
  interval_ = NULL;
}
const ::Time& Stream::interval() const {
  // @@protoc_insertion_point(field_get:Stream.interval)
  return interval_ != NULL ? *interval_ : *default_instance_->interval_;
}
::Time* Stream::mutable_interval() {
  
  if (interval_ == NULL) {
    interval_ = new ::Time;
  }
  // @@protoc_insertion_point(field_mutable:Stream.interval)
  return interval_;
}
::Time* Stream::release_interval() {
  // @@protoc_insertion_point(field_release:Stream.interval)
  
  ::Time* temp = interval_;
  interval_ = NULL;
  return temp;
}
void Stream::set_allocated_interval(::Time* interval) {
  delete interval_;
  interval_ = interval;
  if (interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Stream.interval)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Service::kDestinationsFieldNumber;
const int Service::kCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Service::Service()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Service)
}

void Service::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  command_ = const_cast< ::AbstractData*>(&::AbstractData::default_instance());
}

Service::Service(const Service& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Service)
}

void Service::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  command_ = NULL;
}

Service::~Service() {
  // @@protoc_insertion_point(destructor:Service)
  SharedDtor();
}

void Service::SharedDtor() {
  if (this != default_instance_) {
    delete command_;
  }
}

void Service::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Service::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Service_descriptor_;
}

const Service& Service::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fservice_5finterface_2eproto();
  return *default_instance_;
}

Service* Service::default_instance_ = NULL;

Service* Service::New(::google::protobuf::Arena* arena) const {
  Service* n = new Service;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Service::Clear() {
// @@protoc_insertion_point(message_clear_start:Service)
  if (GetArenaNoVirtual() == NULL && command_ != NULL) delete command_;
  command_ = NULL;
  destinations_.Clear();
}

bool Service::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Service)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Node destinations = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_destinations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_destinations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_destinations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_command;
        break;
      }

      // optional .AbstractData command = 2;
      case 2: {
        if (tag == 18) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Service)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Service)
  return false;
#undef DO_
}

void Service::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Service)
  // repeated .Node destinations = 1;
  for (unsigned int i = 0, n = this->destinations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->destinations(i), output);
  }

  // optional .AbstractData command = 2;
  if (this->has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->command_, output);
  }

  // @@protoc_insertion_point(serialize_end:Service)
}

::google::protobuf::uint8* Service::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Service)
  // repeated .Node destinations = 1;
  for (unsigned int i = 0, n = this->destinations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->destinations(i), false, target);
  }

  // optional .AbstractData command = 2;
  if (this->has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->command_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Service)
  return target;
}

int Service::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Service)
  int total_size = 0;

  // optional .AbstractData command = 2;
  if (this->has_command()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->command_);
  }

  // repeated .Node destinations = 1;
  total_size += 1 * this->destinations_size();
  for (int i = 0; i < this->destinations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->destinations(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Service::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Service)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Service* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Service>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Service)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Service)
    MergeFrom(*source);
  }
}

void Service::MergeFrom(const Service& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Service)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  destinations_.MergeFrom(from.destinations_);
  if (from.has_command()) {
    mutable_command()->::AbstractData::MergeFrom(from.command());
  }
}

void Service::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Service::CopyFrom(const Service& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Service::IsInitialized() const {

  return true;
}

void Service::Swap(Service* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Service::InternalSwap(Service* other) {
  destinations_.UnsafeArenaSwap(&other->destinations_);
  std::swap(command_, other->command_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Service::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Service_descriptor_;
  metadata.reflection = Service_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Service

// repeated .Node destinations = 1;
int Service::destinations_size() const {
  return destinations_.size();
}
void Service::clear_destinations() {
  destinations_.Clear();
}
const ::Node& Service::destinations(int index) const {
  // @@protoc_insertion_point(field_get:Service.destinations)
  return destinations_.Get(index);
}
::Node* Service::mutable_destinations(int index) {
  // @@protoc_insertion_point(field_mutable:Service.destinations)
  return destinations_.Mutable(index);
}
::Node* Service::add_destinations() {
  // @@protoc_insertion_point(field_add:Service.destinations)
  return destinations_.Add();
}
::google::protobuf::RepeatedPtrField< ::Node >*
Service::mutable_destinations() {
  // @@protoc_insertion_point(field_mutable_list:Service.destinations)
  return &destinations_;
}
const ::google::protobuf::RepeatedPtrField< ::Node >&
Service::destinations() const {
  // @@protoc_insertion_point(field_list:Service.destinations)
  return destinations_;
}

// optional .AbstractData command = 2;
bool Service::has_command() const {
  return !_is_default_instance_ && command_ != NULL;
}
void Service::clear_command() {
  if (GetArenaNoVirtual() == NULL && command_ != NULL) delete command_;
  command_ = NULL;
}
const ::AbstractData& Service::command() const {
  // @@protoc_insertion_point(field_get:Service.command)
  return command_ != NULL ? *command_ : *default_instance_->command_;
}
::AbstractData* Service::mutable_command() {
  
  if (command_ == NULL) {
    command_ = new ::AbstractData;
  }
  // @@protoc_insertion_point(field_mutable:Service.command)
  return command_;
}
::AbstractData* Service::release_command() {
  // @@protoc_insertion_point(field_release:Service.command)
  
  ::AbstractData* temp = command_;
  command_ = NULL;
  return temp;
}
void Service::set_allocated_command(::AbstractData* command) {
  delete command_;
  command_ = command;
  if (command) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Service.command)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
